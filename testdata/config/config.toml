# 统一时区设置。项目中的时间获取请使用xtime.Now()
timezone = "Local"

# 任务池
[task]
    # 任务池大小(goroutine)
    size = 100000
    # 是否非阻塞
    nonblocking = true
    # 是否禁用清除。
    disablePurge = true
[cluster]
    # 集群网关配置
    [cluster.gate]
        # 实例ID，网关集群中唯一。不填写默认自动生成唯一的实例ID
        id = ""
        # 实例名称
        name = "gate"
    # 集群节点配置
    [cluster.node]
        # 实例ID，节点集群中唯一。不填写默认自动生成唯一的实例ID
        id = ""
        # 实例名称
        name = "node"
        # 编解码器。可选：json | proto
        codec = "proto"
        # 加密器。可选：rsa | ecc
        encryptor = "ecc"
        # 解密器。可选：rsa | ecc
        decryptor = "ecc"
    # 集群管理节点配置
    [cluster.master]
        # 实例ID，网关集群中唯一。不填写默认自动生成唯一的实例ID
        id = ""
        # 实例名称
        name = "master"
        # 编解码器。可选：json | proto
        codec = "proto"
        # 加密器。可选：rsa | ecc
        encryptor = "ecc"
        # 解密器。可选：rsa | ecc
        decryptor = "ecc"
    # 集群客户端配置，常用于调试使用
    [cluster.client]
        # 实例ID，网关集群中唯一。不填写默认自动生成唯一的实例ID
        id = ""
        # 实例名称
        name = "client"
        # 编解码器。可选：json | proto
        codec = "proto"
        # 加密器。可选：rsa | ecc
        encryptor = "ecc"
        # 解密器。可选：rsa | ecc
        decryptor = "ecc"
[transport]
    # GRPC相关配置
    [transport.grpc]
        # GRPC服务器相关配置
        [transport.grpc.server]
            # 服务器监听地址
            addr = ":8661"
            # 秘钥文件
            keyFile = ""
            # 证书文件
            certFile = ""
        # GRPC客户端相关配置
        [transport.grpc.client]
            # 证书文件
            certFile = ""
            # 证书域名
            serverName = ""
    # RPCX相关配置
    [transport.rpcx]
        # RPCX服务器相关配置
        [transport.rpcx.server]
            # 服务器监听地址
            addr = ":8661"
[packet]
    # 字节序，little | big
    endian = "big"
    # 序列号字节长度（字节）
    seqBytesLen = 2
    # 路由字节长度（字节）
    routeBytesLen = 2
[log]
    # 日志输出文件
    file = "../../testdata/log/due.log"
    # 日志输出级别，可选：debug | info | warn | error | fatal | panic
    level = "info"
    # 日志输出格式，可选：text | json
    format = "text"
    # 是否输出到终端
    stdout = true
    # 时间格式，标准库时间格式
    timeFormat = "2006/01/02 15:04:05.000000"
    # 堆栈的最低输出级别，可选：debug | info | warn | error | fatal | panic
    stackLevel = "error"
    # 文件最大留存时间，d:天、h:时、m:分、s:秒
    fileMaxAge = "7d"
    # 文件最大尺寸限制，单位（MB）
    fileMaxSize = 100
    # 文件切割方式
    fileCutRule = "day"
    # 是否启用调用文件全路径
    callerFullPath = true
    # 是否启用分级存储
    classifiedStorage = true
    # 阿里云SLS日志服务。以下配置项如果不存在，则会使用log域中的默认配置项；如果都未配置，则会使用系统默认配置
    [log.aliyun]
        # 服务域名，公网使用公网域名，内网使用私网域名
        endpoint = "cn-chengdu.log.aliyuncs.com"
        # 访问密钥ID
        accessKeyID = ""
        # 访问密钥密码
        accessKeySecret = ""
        # 项目名称
        project = "due-test"
        # 日志存储
        logstore = "app"
        # 主题标签，默认为空
        topic = ""
        # 来源标签，默认为空
        source = ""
        # 日志输出级别，可选：debug | info | warn | error | fatal | panic
        level = "info"
        # 是否输出到终端
        stdout = true
        # 是否同步输出到远端
        syncout = false
        # 时间格式，标准库时间格式
        timeFormat = "2006/01/02 15:04:05.000000"
        # 堆栈的最低输出级别，可选：debug | info | warn | error | fatal | panic
        stackLevel = "error"
        # 是否启用调用文件全路径
        callerFullPath = true
    # logrus日志组件。以下配置项如果不存在，则会使用log域中的默认配置项；如果均未配置，则会使用系统默认配置
    [log.logrus]
        # 日志输出文件
        file = "../../testdata/log/due.log"
        # 日志输出级别，可选：debug | info | warn | error | fatal | panic
        level = "info"
        # 日志输出格式，可选：text | json
        format = "text"
        # 是否输出到终端
        stdout = true
        # 时间格式，标准库时间格式
        timeFormat = "2006/01/02 15:04:05.000000"
        # 堆栈的最低输出级别，可选：debug | info | warn | error | fatal | panic
        stackLevel = "error"
        # 文件最大留存时间，d:天、h:时、m:分、s:秒
        fileMaxAge = "7d"
        # 文件最大尺寸限制，单位（MB）
        fileMaxSize = 100
        # 文件切割方式
        fileCutRule = "day"
        # 是否启用调用文件全路径
        callerFullPath = true
        # 是否启用分级存储
        classifiedStorage = true
    # 腾讯云云CLS日志服务。以下配置项如果不存在，则会使用log域中的默认配置项；如果都未配置，则会使用系统默认配置
    [log.tencent]
        # 服务域名，公网使用公网域名，内网使用私网域名
        endpoint = "ap-guangzhou.cls.tencentcs.com"
        # 访问密钥ID
        accessKeyID = ""
        # 访问密钥密码
        accessKeySecret = ""
        # 主题ID
        topicID = ""
        # 日志输出级别，可选：debug | info | warn | error | fatal | panic
        level = "info"
        # 是否输出到终端
        stdout = true
        # 是否同步输出到远端
        syncout = false
        # 时间格式，标准库时间格式
        timeFormat = "2006/01/02 15:04:05.000000"
        # 堆栈的最低输出级别，可选：debug | info | warn | error | fatal | panic
        stackLevel = "error"
        # 是否启用调用文件全路径
        callerFullPath = true
    # zap日志组件。以下配置项如果不存在，则会使用log域中的默认配置项；如果均未配置，则会使用系统默认配置
    [log.zap]
        # 日志输出文件
        file = "../../testdata/log/due.log"
        # 日志输出级别，可选：debug | info | warn | error | fatal | panic
        level = "info"
        # 日志输出格式，可选：text | json
        format = "text"
        # 是否输出到终端
        stdout = true
        # 时间格式，标准库时间格式
        timeFormat = "2006/01/02 15:04:05.000000"
        # 堆栈的最低输出级别，可选：debug | info | warn | error | fatal | panic
        stackLevel = "error"
        # 文件最大留存时间，d:天、h:时、m:分、s:秒
        fileMaxAge = "7d"
        # 文件最大尺寸限制，单位（MB）
        fileMaxSize = 100
        # 文件切割方式
        fileCutRule = "day"
        # 是否启用调用文件全路径
        callerFullPath = true
        # 是否启用分级存储
        classifiedStorage = true
[registry]
    [registry.etcd]
        # 客户端连接地址
        addrs = ["127.0.0.1:2379"]
        # 客户端拨号超时时间（秒）
        dialTimeout = 5
        # 命名空间
        namespace = "services"
        # 超时时间（秒）
        timeout = 3
        # 心跳重试次数
        retryTimes = 3
        # 心跳重试间隔（秒）
        retryInterval = 10
    [registry.consul]
        # 客户端连接地址
        addr = "127.0.0.1:8500"
        # 是否启用健康检查
        healthCheck = true
        # 健康检查时间间隔（秒），仅在启用健康检查后生效
        healthCheckInterval = 10
        # 健康检查超时时间（秒），仅在启用健康检查后生效
        healthCheckTimeout = 5
        # 是否启用心跳检查
        heartbeatCheck = true
        # 心跳检查时间间隔（秒），仅在启用心跳检查后生效
        heartbeatCheckInterval = 10
        # 健康检测失败后自动注销服务时间（秒）
        deregisterCriticalServiceAfter = 30
[network]
    [network.ws]
        [network.ws.server]
            # 服务器监听地址
            addr = ":3553"
            # 客户端连接路径
            path = "/"
            # 最大消息长度（字节），默认1kb
            maxMsgLen = 1024
            # 服务器最大连接数
            maxConnNum = 5000
            # 秘钥文件
            keyFile = ""
            # 证书文件
            certFile = ""
            # 跨域检测，空数组时不允许任何连接升级成websocket，未设置此参数时允许所有的链接升级成websocket
            origins = ["*"]
            # 是否启用心跳检测，默认不启用
            heartbeatCheck = true
            # 心跳检测间隔时间（秒），默认为10秒
            heartbeatCheckInterval = 10
            # 握手超时时间（秒），默认10秒
            handshakeTimeout = 10
        [network.ws.client]
            # 拨号地址
            url = "ws://127.0.0.1:3553"
            # 最大消息长度（字节），默认1kb
            maxMsgLen = 1024
            # 握手超时时间（秒）
            handshakeTimeout = 10
            # 是否启用心跳，默认不启用
            heartbeat = false
            # 心跳间隔时间（秒），默认为10秒
            heartbeatInterval = 10
    [network.tcp]
        [network.tcp.server]
            # 服务器监听地址
            addr = ":3553"
            # 最大消息长度（字节），默认1kb
            maxMsgLen = 1024
            # 服务器最大连接数
            maxConnNum = 5000
            # 是否启用心跳检测，默认不启用
            heartbeatCheck = true
            # 心跳检测间隔时间（秒），默认为10秒
            heartbeatCheckInterval = 10
        [network.tcp.client]
            # 拨号地址
            addr = "127.0.0.1:3553"
            # 最大消息长度（字节），默认1kb
            maxMsgLen = 1024
            # 是否启用心跳，默认不启用
            heartbeat = true
            # 心跳间隔时间（秒），默认为10秒
            heartbeatInterval = 10
[locate]
    [locate.redis]
        # 客户端连接地址
        addrs = ["127.0.0.1:6379"]
        # 数据库号
        db = 0
        # 用户名
        username = ""
        # 密码
        password = ""
        # 最大重试次数
        maxRetries = 3
        # key前缀
        prefix = "due"
[crypto]
    # RSA设置
    [crypto.rsa]
        [crypto.rsa.encryptor]
            # hash算法，不区分大小写。可选：SHA1 | SHA224 | SHA256 | SHA384 | SHA512
            hash = "SHA256"
            # 填充规则，不区分大小写。可选：NORMAL | OAEP
            padding = "NORMAL"
            # 标签，加解密时必需一致
            label = ""
            # 加密数据块大小，单位字节。由于加密数据长度限制，需要对加密数据进行分块儿加密
            blockSize = 0
            # 公钥，可设置文件路径或公钥串
            publicKey = ""
        [crypto.rsa.decryptor]
            # hash算法，不区分大小写。可选：SHA1 | SHA224 | SHA256 | SHA384 | SHA512
            hash = "SHA256"
            # 填充规则，不区分大小写。可选：NORMAL | OAEP
            padding = "NORMAL"
            # 标签。加解密时必需一致
            label = ""
            # 私钥。可设置文件路径或私钥串
            privateKey = ""
        [crypto.rsa.signer]
            # hash算法，不区分大小写。可选：SHA1 | SHA224 | SHA256 | SHA384 | SHA512
            hash = "SHA256"
            # 填充规则，不区分大小写。可选：PKCS | PSS
            padding = "PSS"
            # 私钥。可设置文件路径或私钥串
            privateKey = ""
        [crypto.rsa.verifier]
            # hash算法，不区分大小写。可选：SHA1 | SHA224 | SHA256 | SHA384 | SHA512
            hash = "SHA256"
            # 填充规则，不区分大小写。可选：PKCS | PSS
            padding = "PSS"
            # 公钥，可设置文件路径或公钥串
            publicKey = ""
    # ECC设置
    [crypto.ecc]
        [crypto.ecc.encryptor]
            # 共享信息。加解密时必需一致
            s1 = ""
            # 共享信息。加解密时必需一致
            s2 = ""
            # 公钥，可设置文件路径或公钥串
            publicKey = ""
        [crypto.ecc.decryptor]
            # 共享信息。加解密时必需一致
            s1 = ""
            # 共享信息。加解密时必需一致
            s2 = ""
            # 私钥。可设置文件路径或私钥串
            privateKey = ""
        [crypto.ecc.signer]
            # hash算法，不区分大小写。可选：SHA1 | SHA224 | SHA256 | SHA384 | SHA512
            hash = "SHA256"
            # 签名分隔符。由于ECDSA签名算法会产生两段签名串，因此需要通过分隔符将其拼接为一个签名
            delimiter = " "
            # 私钥。可设置文件路径或私钥串
            privateKey = ""
        [crypto.ecc.verifier]
            # hash算法，不区分大小写。可选：SHA1 | SHA224 | SHA256 | SHA384 | SHA512
            hash = "SHA256"
            # 签名分隔符。由于ECDSA签名算法会产生两段签名串，因此需要通过分隔符将其拼接为一个签名
            delimiter = " "
            # 公钥，可设置文件路径或公钥串
            publicKey = ""
[alert]
    # 启用的报警器
    enabledAlerters = ["feishu", "email"]
    # 飞书报警。通过飞书群聊机器人实现
    [alert.feishu]
        # 群聊机器人秘钥。
        secret = ""
        # 群聊机器人webhook
        webhook = "https://open.feishu.cn/open-apis/bot/v2/hook/231e12c0-97b9-4e81-a920-abc24bda286f"
    # 企业微信报警。通过企业微信群聊机器人实现
    [alert.work]